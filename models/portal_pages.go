// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// PortalPage is an object representing the database table.
type PortalPage struct {
	// Portal Page 的唯一標識符
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 擁有此頁面的使用者 ID
	UserID int `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// 頁面的 URL 識別名稱，必須是唯一的
	Slug string `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	// 頁面標題或顯示名稱
	Title string `boil:"title" json:"title" toml:"title" yaml:"title"`
	// 使用者的個人簡介或描述
	Bio null.String `boil:"bio" json:"bio,omitempty" toml:"bio" yaml:"bio,omitempty"`
	// 個人頭像圖片的 URL
	ProfileImageURL null.String `boil:"profile_image_url" json:"profile_image_url,omitempty" toml:"profile_image_url" yaml:"profile_image_url,omitempty"`
	// 頁面主題設定
	Theme null.String `boil:"theme" json:"theme,omitempty" toml:"theme" yaml:"theme,omitempty"`
	// 建立時間 UTC
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	// 更新時間 UTC
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *portalPageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L portalPageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PortalPageColumns = struct {
	ID              string
	UserID          string
	Slug            string
	Title           string
	Bio             string
	ProfileImageURL string
	Theme           string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	UserID:          "user_id",
	Slug:            "slug",
	Title:           "title",
	Bio:             "bio",
	ProfileImageURL: "profile_image_url",
	Theme:           "theme",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var PortalPageTableColumns = struct {
	ID              string
	UserID          string
	Slug            string
	Title           string
	Bio             string
	ProfileImageURL string
	Theme           string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "portal_pages.id",
	UserID:          "portal_pages.user_id",
	Slug:            "portal_pages.slug",
	Title:           "portal_pages.title",
	Bio:             "portal_pages.bio",
	ProfileImageURL: "portal_pages.profile_image_url",
	Theme:           "portal_pages.theme",
	CreatedAt:       "portal_pages.created_at",
	UpdatedAt:       "portal_pages.updated_at",
}

// Generated where

var PortalPageWhere = struct {
	ID              whereHelperint
	UserID          whereHelperint
	Slug            whereHelperstring
	Title           whereHelperstring
	Bio             whereHelpernull_String
	ProfileImageURL whereHelpernull_String
	Theme           whereHelpernull_String
	CreatedAt       whereHelpernull_Time
	UpdatedAt       whereHelpernull_Time
}{
	ID:              whereHelperint{field: "\"portal_pages\".\"id\""},
	UserID:          whereHelperint{field: "\"portal_pages\".\"user_id\""},
	Slug:            whereHelperstring{field: "\"portal_pages\".\"slug\""},
	Title:           whereHelperstring{field: "\"portal_pages\".\"title\""},
	Bio:             whereHelpernull_String{field: "\"portal_pages\".\"bio\""},
	ProfileImageURL: whereHelpernull_String{field: "\"portal_pages\".\"profile_image_url\""},
	Theme:           whereHelpernull_String{field: "\"portal_pages\".\"theme\""},
	CreatedAt:       whereHelpernull_Time{field: "\"portal_pages\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"portal_pages\".\"updated_at\""},
}

// PortalPageRels is where relationship names are stored.
var PortalPageRels = struct {
}{}

// portalPageR is where relationships are stored.
type portalPageR struct {
}

// NewStruct creates a new relationship struct
func (*portalPageR) NewStruct() *portalPageR {
	return &portalPageR{}
}

// portalPageL is where Load methods for each relationship are stored.
type portalPageL struct{}

var (
	portalPageAllColumns            = []string{"id", "user_id", "slug", "title", "bio", "profile_image_url", "theme", "created_at", "updated_at"}
	portalPageColumnsWithoutDefault = []string{"user_id", "slug", "title"}
	portalPageColumnsWithDefault    = []string{"id", "bio", "profile_image_url", "theme", "created_at", "updated_at"}
	portalPagePrimaryKeyColumns     = []string{"id"}
	portalPageGeneratedColumns      = []string{}
)

type (
	// PortalPageSlice is an alias for a slice of pointers to PortalPage.
	// This should almost always be used instead of []PortalPage.
	PortalPageSlice []*PortalPage
	// PortalPageHook is the signature for custom PortalPage hook methods
	PortalPageHook func(context.Context, boil.ContextExecutor, *PortalPage) error

	portalPageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	portalPageType                 = reflect.TypeOf(&PortalPage{})
	portalPageMapping              = queries.MakeStructMapping(portalPageType)
	portalPagePrimaryKeyMapping, _ = queries.BindMapping(portalPageType, portalPageMapping, portalPagePrimaryKeyColumns)
	portalPageInsertCacheMut       sync.RWMutex
	portalPageInsertCache          = make(map[string]insertCache)
	portalPageUpdateCacheMut       sync.RWMutex
	portalPageUpdateCache          = make(map[string]updateCache)
	portalPageUpsertCacheMut       sync.RWMutex
	portalPageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var portalPageAfterSelectMu sync.Mutex
var portalPageAfterSelectHooks []PortalPageHook

var portalPageBeforeInsertMu sync.Mutex
var portalPageBeforeInsertHooks []PortalPageHook
var portalPageAfterInsertMu sync.Mutex
var portalPageAfterInsertHooks []PortalPageHook

var portalPageBeforeUpdateMu sync.Mutex
var portalPageBeforeUpdateHooks []PortalPageHook
var portalPageAfterUpdateMu sync.Mutex
var portalPageAfterUpdateHooks []PortalPageHook

var portalPageBeforeDeleteMu sync.Mutex
var portalPageBeforeDeleteHooks []PortalPageHook
var portalPageAfterDeleteMu sync.Mutex
var portalPageAfterDeleteHooks []PortalPageHook

var portalPageBeforeUpsertMu sync.Mutex
var portalPageBeforeUpsertHooks []PortalPageHook
var portalPageAfterUpsertMu sync.Mutex
var portalPageAfterUpsertHooks []PortalPageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PortalPage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portalPageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PortalPage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portalPageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PortalPage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portalPageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PortalPage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portalPageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PortalPage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portalPageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PortalPage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portalPageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PortalPage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portalPageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PortalPage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portalPageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PortalPage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portalPageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPortalPageHook registers your hook function for all future operations.
func AddPortalPageHook(hookPoint boil.HookPoint, portalPageHook PortalPageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		portalPageAfterSelectMu.Lock()
		portalPageAfterSelectHooks = append(portalPageAfterSelectHooks, portalPageHook)
		portalPageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		portalPageBeforeInsertMu.Lock()
		portalPageBeforeInsertHooks = append(portalPageBeforeInsertHooks, portalPageHook)
		portalPageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		portalPageAfterInsertMu.Lock()
		portalPageAfterInsertHooks = append(portalPageAfterInsertHooks, portalPageHook)
		portalPageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		portalPageBeforeUpdateMu.Lock()
		portalPageBeforeUpdateHooks = append(portalPageBeforeUpdateHooks, portalPageHook)
		portalPageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		portalPageAfterUpdateMu.Lock()
		portalPageAfterUpdateHooks = append(portalPageAfterUpdateHooks, portalPageHook)
		portalPageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		portalPageBeforeDeleteMu.Lock()
		portalPageBeforeDeleteHooks = append(portalPageBeforeDeleteHooks, portalPageHook)
		portalPageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		portalPageAfterDeleteMu.Lock()
		portalPageAfterDeleteHooks = append(portalPageAfterDeleteHooks, portalPageHook)
		portalPageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		portalPageBeforeUpsertMu.Lock()
		portalPageBeforeUpsertHooks = append(portalPageBeforeUpsertHooks, portalPageHook)
		portalPageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		portalPageAfterUpsertMu.Lock()
		portalPageAfterUpsertHooks = append(portalPageAfterUpsertHooks, portalPageHook)
		portalPageAfterUpsertMu.Unlock()
	}
}

// One returns a single portalPage record from the query.
func (q portalPageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PortalPage, error) {
	o := &PortalPage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for portal_pages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PortalPage records from the query.
func (q portalPageQuery) All(ctx context.Context, exec boil.ContextExecutor) (PortalPageSlice, error) {
	var o []*PortalPage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PortalPage slice")
	}

	if len(portalPageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PortalPage records in the query.
func (q portalPageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count portal_pages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q portalPageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if portal_pages exists")
	}

	return count > 0, nil
}

// PortalPages retrieves all the records using an executor.
func PortalPages(mods ...qm.QueryMod) portalPageQuery {
	mods = append(mods, qm.From("\"portal_pages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"portal_pages\".*"})
	}

	return portalPageQuery{q}
}

// FindPortalPage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPortalPage(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PortalPage, error) {
	portalPageObj := &PortalPage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"portal_pages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, portalPageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from portal_pages")
	}

	if err = portalPageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return portalPageObj, err
	}

	return portalPageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PortalPage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no portal_pages provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portalPageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	portalPageInsertCacheMut.RLock()
	cache, cached := portalPageInsertCache[key]
	portalPageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			portalPageAllColumns,
			portalPageColumnsWithDefault,
			portalPageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(portalPageType, portalPageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(portalPageType, portalPageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"portal_pages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"portal_pages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into portal_pages")
	}

	if !cached {
		portalPageInsertCacheMut.Lock()
		portalPageInsertCache[key] = cache
		portalPageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PortalPage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PortalPage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	portalPageUpdateCacheMut.RLock()
	cache, cached := portalPageUpdateCache[key]
	portalPageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			portalPageAllColumns,
			portalPagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update portal_pages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"portal_pages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, portalPagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(portalPageType, portalPageMapping, append(wl, portalPagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update portal_pages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for portal_pages")
	}

	if !cached {
		portalPageUpdateCacheMut.Lock()
		portalPageUpdateCache[key] = cache
		portalPageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q portalPageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for portal_pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for portal_pages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PortalPageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portalPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"portal_pages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, portalPagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in portalPage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all portalPage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PortalPage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no portal_pages provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portalPageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	portalPageUpsertCacheMut.RLock()
	cache, cached := portalPageUpsertCache[key]
	portalPageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			portalPageAllColumns,
			portalPageColumnsWithDefault,
			portalPageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			portalPageAllColumns,
			portalPagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert portal_pages, could not build update column list")
		}

		ret := strmangle.SetComplement(portalPageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(portalPagePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert portal_pages, could not build conflict column list")
			}

			conflict = make([]string, len(portalPagePrimaryKeyColumns))
			copy(conflict, portalPagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"portal_pages\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(portalPageType, portalPageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(portalPageType, portalPageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert portal_pages")
	}

	if !cached {
		portalPageUpsertCacheMut.Lock()
		portalPageUpsertCache[key] = cache
		portalPageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PortalPage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PortalPage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PortalPage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), portalPagePrimaryKeyMapping)
	sql := "DELETE FROM \"portal_pages\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from portal_pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for portal_pages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q portalPageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no portalPageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from portal_pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for portal_pages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PortalPageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(portalPageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portalPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"portal_pages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, portalPagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from portalPage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for portal_pages")
	}

	if len(portalPageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PortalPage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPortalPage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortalPageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PortalPageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portalPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"portal_pages\".* FROM \"portal_pages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, portalPagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PortalPageSlice")
	}

	*o = slice

	return nil
}

// PortalPageExists checks if the PortalPage row exists.
func PortalPageExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"portal_pages\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if portal_pages exists")
	}

	return exists, nil
}

// Exists checks if the PortalPage row exists.
func (o *PortalPage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PortalPageExists(ctx, exec, o.ID)
}
